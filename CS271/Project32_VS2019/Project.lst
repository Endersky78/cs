Microsoft (R) Macro Assembler Version 14.29.30139.0	    02/13/22 16:33:15
Assignment 4		(assignmen4.asm			     Page 1 - 1


				TITLE Assignment 4		(assignmen4.asm)

				COMMENT &
					Author: Jackson Hart
					Last Modified:
					OSU email address: hartjack@oregonstate.edu
					Course number/section: 31528
					Assignment Number: 4
					Due Date: 2/13/2022
					Description: Asks the user how many composite numbers they want to print, and the program prints
							   that number of composites. 
				&

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000012C			UPPER_LIMIT	EQU 300
 = [ebp-4]			LOCAL_A		EQU [ebp-4]
 = [ebp-8]			LOCAL_B		EQU [ebp-8]
 = [ebp+8]			PARAM_A		EQU [ebp+8]

 00000000			.data

 00000000 57 65 6C 63 6F	intro_str_1		BYTE		"Welcome to the composite number spreadsheet", 10, "Programmed by Jackson Hart", 0
	   6D 65 20 74 6F
	   20 74 68 65 20
	   63 6F 6D 70 6F
	   73 69 74 65 20
	   6E 75 6D 62 65
	   72 20 73 70 72
	   65 61 64 73 68
	   65 65 74 0A 50
	   72 6F 67 72 61
	   6D 6D 65 64 20
	   62 79 20 4A 61
	   63 6B 73 6F 6E
	   20 48 61 72 74
	   00
 00000047 54 68 69 73 20	intro_str_2		BYTE		"This program is capable of generating a list of composite numbers.", 10, "Simply let me know how many you would like to see.", \
	   70 72 6F 67 72
	   61 6D 20 69 73
	   20 63 61 70 61
	   62 6C 65 20 6F
	   66 20 67 65 6E
	   65 72 61 74 69
	   6E 67 20 61 20
	   6C 69 73 74 20
	   6F 66 20 63 6F
	   6D 70 6F 73 69
	   74 65 20 6E 75
	   6D 62 65 72 73
	   2E 0A 53 69 6D
	   70 6C 79 20 6C
	   65 74 20 6D 65
	   20 6B 6E 6F 77
	   20 68 6F 77 20
	   6D 61 6E 79 20
	   79 6F 75 20 77
	   6F 75 6C 64 20
	   6C 69 6B 65 20
	   74 6F 20 73 65
	   65 2E 0A 49 20
	   77 69 6C 6C 20
	   61 63 63 65 70
	   74 20 6F 72 64
	   65 72 73 20 66
	   6F 72 20 75 70
	   20 74 6F 20 33
	   30 30 20 63 6F
	   6D 70 6F 73 69
	   74 65 73 2E 00
										10, "I will accept orders for up to 300 composites.", 0
 000000EC 48 6F 77 20 6D	prompt_str		BYTE		"How many composites do you want to view? [1 .. 300]:", 0
	   61 6E 79 20 63
	   6F 6D 70 6F 73
	   69 74 65 73 20
	   64 6F 20 79 6F
	   75 20 77 61 6E
	   74 20 74 6F 20
	   76 69 65 77 3F
	   20 5B 31 20 2E
	   2E 20 33 30 30
	   5D 3A 00
 00000121 54 68 61 74 20	bad_in_str		BYTE		"That was not within the specified range, try again!", 10, 0
	   77 61 73 20 6E
	   6F 74 20 77 69
	   74 68 69 6E 20
	   74 68 65 20 73
	   70 65 63 69 66
	   69 65 64 20 72
	   61 6E 67 65 2C
	   20 74 72 79 20
	   61 67 61 69 6E
	   21 0A 00
 00000156 54 68 61 6E 6B	goodbyte_str		BYTE		"Thanks for using my program!", 0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   70 72 6F 67 72
	   61 6D 21 00
 00000173 09 00			tab_char			BYTE		9, 0
 00000175 0A 00			endl_char			BYTE		10, 0
 00000177 0000000A		num_chars			DWORD	10

 0000017B 00000000		num_composites	DWORD		?

 00000000			.code
 00000000			main PROC

 00000000  E8 00000016			call		intro
 00000005  E8 00000032			call		getInput
 0000000A  E8 00000071			call		showComposites
 0000000F  E8 00000130			call		goodByte

					exit										; exit to operating system
 00000014  6A 00	   *	    push   +000000000h
 00000016  E8 00000000 E   *	    call   ExitProcess
 0000001B			main ENDP

				COMMENT &
					Description: Introduces user to program
					Recieves: intro_str_1, intro_str_2
					Returns: none
					Pre-conditions: none
					Post-conditions: none
					Registers Changed: EDX (pushed onto stack)
				&
 0000001B			intro PROC USES edx
 0000001B  52		   *	    push   edx
 0000001C  BA 00000000 R		mov		edx, OFFSET intro_str_1
 00000021  E8 00000000 E		call		WriteString
 00000026  E8 00000000 E		call		Crlf
 0000002B  BA 00000047 R		mov		edx, OFFSET intro_str_2
 00000030  E8 00000000 E		call		WriteString
 00000035  E8 00000000 E		call		Crlf

					ret
 0000003A  5A		   *	    pop    edx
 0000003B  C3		   *	    ret    00000h
 0000003C			intro ENDP

				COMMENT &
					Description: Gets the number of composites to view from the user and calls validateInput
					Recieves: none
					Returns: none
					Pre-conditions: none
					Post-Conditions: num_composites will be updated with valid user input
					Registers Changed: EAX and EDX (pushed onto stack)
				&
 0000003C			getInput PROC USES edx eax
 0000003C  52		   *	    push   edx
 0000003D  50		   *	    push   eax
 0000003E  55				push		ebp

 0000003F  BA 000000EC R		mov		edx, OFFSET prompt_str
 00000044  E8 00000000 E		call		WriteString
 00000049  E8 00000000 E		call		ReadDec
 0000004E  E8 00000004			call		validateInput

 00000053  5D				pop		ebp
					ret
 00000054  58		   *	    pop    eax
 00000055  5A		   *	    pop    edx
 00000056  C3		   *	    ret    00000h
 00000057			getInput ENDP

				COMMENT &
					Description: Validates that the value stored in EAX is between 1 and 300
					Recieves: none
					Returns: none
					Pre-conditions: user input is stored in EAX
					Post-Conditions: either will set num_composites or call getInput
					Registers Changed: none
				&
 00000057			validateInput PROC
 00000057  55				push		ebp
 00000058  8B EC			mov		ebp, esp

 0000005A  83 F8 00			cmp		eax, 0
 0000005D  7E 09			jle		BadInput						; if input <= 0
 0000005F  3D 0000012C			cmp		eax, UPPER_LIMIT
 00000064  7F 02			jg		BadInput						; if input > 300
 00000066  EB 11			jmp		GoodInput						; else...

 00000068			BadInput:
 00000068  BA 00000121 R		mov		edx, OFFSET bad_in_str
 0000006D  E8 00000000 E		call		WriteString
 00000072  E8 FFFFFFC5			call		getInput						; Get new input
 00000077  EB 05			jmp		Return_A
 00000079			GoodInput:
 00000079  A3 0000017B R		mov		num_composites, eax				; Save the validated input

 0000007E			Return_A:
 0000007E  5D				pop		ebp
 0000007F  C3				ret
 00000080			validateInput ENDP

				COMMENT &
					Description: Displays composite numbers
					Recieves: none
					Returns: none
					Pre-conditions: num_composites is set
					Post-Conditions: composites will be displayed to the user
					Registers Changed: none
				&
 00000080			showComposites PROC USES ecx eax edx
 00000080  51		   *	    push   ecx
 00000081  50		   *	    push   eax
 00000082  52		   *	    push   edx
 00000083  55				push		ebp
 00000084  8B EC			mov		ebp, esp
 00000086  83 EC 08			sub		esp, 8						; Free space for my local var
 00000089  C7 45 FC			mov		DWORD PTR LOCAL_A, 1			; Local variable for displaying composites (Starts at 1 because loop will inc to 2 which will not be recognized as comp)
	   00000001

 00000090  8B 0D 0000017B R		mov		ecx, num_composites
 00000096  BA 00000173 R		mov		edx, OFFSET tab_char			; Load tab char into edx


 0000009B			Loopie_A:
 0000009B  FF 45 FC			inc		DWORD PTR LOCAL_A
 0000009E  FF 75 FC			push		DWORD PTR LOCAL_A				; Push argument
 000000A1  E8 00000057			call		checkComposite
 000000A6  8F 45 F8			pop		DWORD PTR LOCAL_B				; Pop argument into LOCAL_B
 000000A9  83 7D F8 00			cmp		DWORD PTR LOCAL_B, 0			; Is the current integer a composite?
 000000AD  74 16			je		NonPrime
 000000AF  8B 45 F8			mov		eax, DWORD PTR LOCAL_B
 000000B2  E8 00000000 E		call		WriteDec						; Write composite
 000000B7  E8 00000000 E		call		WriteString					; Write spaces
 000000BC  E8 0000000D			call		checkEndL						; Check if it's time for a new line
 000000C1  E2 D8			loop		Loopie_A
 000000C3  EB 02			jmp		Return_C
 000000C5			NonPrime:
 000000C5  EB D4			jmp		Loopie_A

 000000C7			Return_C:
 000000C7  8B E5			mov		esp, ebp						; Remove locals from stack
 000000C9  5D				pop		ebp
					ret
 000000CA  5A		   *	    pop    edx
 000000CB  58		   *	    pop    eax
 000000CC  59		   *	    pop    ecx
 000000CD  C3		   *	    ret    00000h
 000000CE			showComposites ENDP

				COMMENT &
					Description: Checks if it is time to insert and endl
					Recieves: none
					Returns: none
					Pre-conditions: ecx is currently being used for a counter and num_composites is set
					Post-Conditions: if num_composites - ecx is divisable by 10, a endl will be printed
					Registers Changed: none
				&
 000000CE			checkEndL	PROC USES eax ebx edx
 000000CE  50		   *	    push   eax
 000000CF  53		   *	    push   ebx
 000000D0  52		   *	    push   edx
 000000D1  55				push		ebp

 000000D2  8B 1D 0000017B R		mov		ebx, num_composites
 000000D8  8B C1			mov		eax, ecx
 000000DA  2B D8			sub		ebx, eax						; num_composites - ecx = number the current composite is
 000000DC  93				xchg		ebx, eax
 000000DD  40				inc		eax							; So it starts at 1 and not 0
 000000DE  BA 00000000			mov		edx, 0
 000000E3  F7 35 00000177 R		div		num_chars
 000000E9  83 FA 00			cmp		edx, 0						; If the current composite's position is divisible by 10...
 000000EC  75 0A			jne		Return_D
 000000EE  BA 00000175 R		mov		edx, OFFSET endl_char			; Print a new line
 000000F3  E8 00000000 E		call		WriteString

 000000F8			Return_D:
 000000F8  5D				pop		ebp
					ret
 000000F9  5A		   *	    pop    edx
 000000FA  5B		   *	    pop    ebx
 000000FB  58		   *	    pop    eax
 000000FC  C3		   *	    ret    00000h
 000000FD			checkEndL	ENDP

				COMMENT &
					Description: Checks to see if a given number is a composite
					Recieves: number to check (LOCAL_A)
					Returns: 0 if not a composite, the inputted number if it is
					Pre-conditions: some number to check is pushed to the stack
					Post-Conditions: the number on the stack may be 0
					Registers Changed: none (pushed and popped so they do not get changed)
				&
 000000FD			checkComposite PROC
 000000FD  55				push		ebp
 000000FE  8B EC			mov		ebp, esp
 00000100  83 EC 04			sub		esp, 4						; Free space for my local var
 00000103  50				push		eax
 00000104  51				push		ecx
 00000105  52				push		edx							; Save EAX, ECX, & EDX separately so I don't lose my parameter

 00000106  C7 45 FC			mov		DWORD PTR LOCAL_A, 1			; Make sure loop doesn't divide the number by 1
	   00000001
 0000010D  8B 4D 08			mov		ecx, DWORD PTR PARAM_A
 00000110  83 E9 02			sub		ecx, 2						; Make sure loop doesn't divide the number by itself

 00000113  83 F9 00			cmp		ecx, 0
 00000116  7F 09			jg		Loopie_B
 00000118  C7 45 08			mov		DWORD PTR PARAM_A, 0
	   00000000
 0000011F  EB 1C			jmp		Return_B

 00000121			Loopie_B:
 00000121  FF 45 FC			inc		DWORD PTR LOCAL_A
 00000124  8B 45 08			mov		eax, DWORD PTR PARAM_A
 00000127  BA 00000000			mov		edx, 0
 0000012C  F7 75 FC			div		DWORD PTR LOCAL_A
 0000012F  83 FA 00			cmp		edx, 0
 00000132  74 09			je		Return_B						; If we found a number this num is divisible by, return
 00000134  E2 EB			loop		Loopie_B

 00000136  C7 45 08			mov		DWORD PTR PARAM_A, 0			; If we did not find a number, then return 0
	   00000000

 0000013D			Return_B:
 0000013D  5A				pop		edx
 0000013E  59				pop		ecx
 0000013F  58				pop		eax
 00000140  8B E5			mov		esp, ebp
 00000142  5D				pop		ebp
 00000143  C3				ret
 00000144			checkComposite ENDP

 00000144			goodByte PROC USES edx
 00000144  52		   *	    push   edx
 00000145  55				push			ebp

 00000146  BA 00000156 R		mov		edx, OFFSET goodbyte_str
 0000014B  E8 00000000 E		call		WriteString

 00000150  5D				pop			ebp
					ret
 00000151  5A		   *	    pop    edx
 00000152  C3		   *	    ret    00000h
 00000153			goodByte ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30139.0	    02/13/22 16:33:15
Assignment 4		(assignmen4.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000017F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000153 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkComposite . . . . . . . . .	P Near	 000000FD _TEXT	Length= 00000047 Public STDCALL
  Loopie_B . . . . . . . . . . .	L Near	 00000121 _TEXT	
  Return_B . . . . . . . . . . .	L Near	 0000013D _TEXT	
checkEndL  . . . . . . . . . . .	P Near	 000000CE _TEXT	Length= 0000002F Public STDCALL
  Return_D . . . . . . . . . . .	L Near	 000000F8 _TEXT	
getInput . . . . . . . . . . . .	P Near	 0000003C _TEXT	Length= 0000001B Public STDCALL
goodByte . . . . . . . . . . . .	P Near	 00000144 _TEXT	Length= 0000000F Public STDCALL
intro  . . . . . . . . . . . . .	P Near	 0000001B _TEXT	Length= 00000021 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showComposites . . . . . . . . .	P Near	 00000080 _TEXT	Length= 0000004E Public STDCALL
  Loopie_A . . . . . . . . . . .	L Near	 0000009B _TEXT	
  NonPrime . . . . . . . . . . .	L Near	 000000C5 _TEXT	
  Return_C . . . . . . . . . . .	L Near	 000000C7 _TEXT	
validateInput  . . . . . . . . .	P Near	 00000057 _TEXT	Length= 00000029 Public STDCALL
  BadInput . . . . . . . . . . .	L Near	 00000068 _TEXT	
  GoodInput  . . . . . . . . . .	L Near	 00000079 _TEXT	
  Return_A . . . . . . . . . . .	L Near	 0000007E _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOCAL_A  . . . . . . . . . . . .	Text   	 [ebp-4]
LOCAL_B  . . . . . . . . . . . .	Text   	 [ebp-8]
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PARAM_A  . . . . . . . . . . . .	Text   	 [ebp+8]
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER_LIMIT  . . . . . . . . . .	Number	 0000012Ch   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
bad_in_str . . . . . . . . . . .	Byte	 00000121 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endl_char  . . . . . . . . . . .	Byte	 00000175 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyte_str . . . . . . . . . .	Byte	 00000156 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_str_1  . . . . . . . . . .	Byte	 00000000 _DATA	
intro_str_2  . . . . . . . . . .	Byte	 00000047 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_chars  . . . . . . . . . . .	DWord	 00000177 _DATA	
num_composites . . . . . . . . .	DWord	 0000017B _DATA	
prompt_str . . . . . . . . . . .	Byte	 000000EC _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
tab_char . . . . . . . . . . . .	Byte	 00000173 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
