Microsoft (R) Macro Assembler Version 14.29.30139.0	    03/01/22 17:53:59
"Assignment 5     (assignment5.asm			     Page 1 - 1


				TITLE Assignment 5     (assignment5.asm)

				COMMENT &
					Author: Jackson Hart
					Last Modified:
					OSU email address: hartjack@oregonstate.edu
					Course number/section: 31528
					Assignment Number:
					Due Date:
					Description: 
				&

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 00000064			RAND_LOW		EQU		100
 = 000003E7			RAND_HI			EQU		999
 = 0000000F			USER_LOW		EQU		15
 = 000000C8			USER_HI			EQU		200

 = [ebp+8]			PARAM_A			EQU		[ebp+8]
 = [ebp+12]			PARAM_B			EQU		[ebp+12]
 = [ebp+16]			PARAM_C			EQU		[ebp+16]
 = [ebp+20]			PARAM_D			EQU		[ebp+20]

 = [ebp-4]			LOCAL_A			EQU		[ebp-4]
 = [ebp-8]			LOCAL_B			EQU		[ebp-8]
 = [ebp-12]			LOCAL_C			EQU		[ebp-12]
 = [ebp-16]			LOCAL_D			EQU		[ebp-16]

 = 00000020			SPACE_CHAR		EQU		20h
 = 0000000A			NUM_PER_LINE	EQU		10

 00000000			.data

 00000000 53 6F 72 74 69		intro_str		BYTE		"Sorting Random Integers", 10, 13, \
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   49 6E 74 65 67
	   65 72 73 0A 0D
	   42 79 20 4A 61
	   63 6B 73 6F 6E
	   20 48 61 72 74
	   0A 0D 45 43 3A
	   20 48 65 6C 6C
	   6F 20 53 61 64
	   69 65 20 54 68
	   6F 6D 61 73 20
	   28 69 66 20 6E
	   6F 74 2C 20 68
	   65 6C 6C 6F 20
	   54 41 29 21 0A
	   0D 54 68 69 73
	   20 70 72 6F 67
	   72 61 6D 20 67
	   65 6E 65 72 61
	   74 65 73 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 20 69
	   6E 20 74 68 65
	   20 72 61 6E 67
	   65 20 5B 31 30
	   30 20 2E 2E 2E
	   20 39 39 39 5D
	   2C 0A 0D 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6F 72 69 67
	   69 6E 61 6C 20
	   6C 69 73 74 2C
	   20 73 6F 72 74
	   73 20 74 68 65
	   20 6C 69 73 74
	   2C 20 61 6E 64
	   20 63 61 6C 63
	   75 6C 61 74 65
	   73 20 74 68 65
	   20 6D 65 64 69
	   61 6E 20 76 61
	   6C 75 65 2E 0A
	   0D 46 69 6E 61
	   6C 6C 79 2C 20
	   69 74 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6C 69 73 74
	   20 73 6F 72 74
	   65 64 20 69 6E
	   20 64 65 73 63
	   65 6E 64 69 6E
	   67 20 6F 72 64
	   65 72 2E 00
												"By Jackson Hart", 10, 13, \
												"EC: Hello Sadie Thomas (if not, hello TA)!", 10, 13, \
												"This program generates random numbers in the range [100 ... 999],", 10, 13, \
												"displays the original list, sorts the list, and calculates the median value.", 10, 13, \
												"Finally, it displays the list sorted in descending order.", 0
 00000121 48 6F 77 20 6D		number_prompt	BYTE		"How many numbers should be generated? [15 ... 200]: ", 0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   35 20 2E 2E 2E
	   20 32 30 30 5D
	   3A 20 00
 00000156 49 6E 76 61 6C		invalid_str		BYTE		"Invalid input, try again!", 0
	   69 64 20 69 6E
	   70 75 74 2C 20
	   74 72 79 20 61
	   67 61 69 6E 21
	   00
 00000170 54 68 65 20 6D		median_str		BYTE		"The median is ", 0
	   65 64 69 61 6E
	   20 69 73 20 00
 0000017F 54 68 65 20 75		unsort_str		BYTE		"The unsorted list: ", 0
	   6E 73 6F 72 74
	   65 64 20 6C 69
	   73 74 3A 20 00
 00000193 54 68 65 20 73		sorted_str		BYTE		"The sorted list: ", 0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 20 00
 000001A5 54 68 61 6E 6B		goodbyte_str	BYTE		"Thanks for using my program!", 0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   70 72 6F 67 72
	   61 6D 21 00

 000001C2 00000000			num_ints		DWORD		0
 000001C6  000000C8 [			num_arr			DWORD		USER_HI DUP(?)
	    00000000
	   ]

 00000000			.code
 00000000			main PROC
					
 00000000  68 00000000 R		push	OFFSET intro_str
 00000005  E8 000000BB			call	Intro

 0000000A  68 00000156 R		push	OFFSET invalid_str
 0000000F  68 00000121 R		push	OFFSET number_prompt
 00000014  68 000001C2 R		push	OFFSET num_ints
 00000019  E8 000000BD			call	GetData

 0000001E  FF 35 000001C2 R		push	num_ints
 00000024  68 000001C6 R		push	OFFSET num_arr
 00000029  E8 000000E9			call	FillArray

 0000002E  E8 00000000 E		call	Crlf
 00000033  BA 0000017F R		mov		edx, OFFSET unsort_str
 00000038  E8 00000000 E		call	WriteString
 0000003D  E8 00000000 E		call	Crlf
 00000042  68 000001C6 R		push	OFFSET num_arr
 00000047  FF 35 000001C2 R		push	num_ints
 0000004D  E8 000001CF			call	DisplayList
 00000052  E8 00000000 E		call	Crlf

 00000057  FF 35 000001C2 R		push	num_ints
 0000005D  68 000001C6 R		push	OFFSET num_arr
 00000062  E8 000000FC			call	SortList

 00000067  BA 00000170 R		mov		edx, OFFSET median_str
 0000006C  E8 00000000 E		call	WriteString
 00000071  FF 35 000001C2 R		push	num_ints
 00000077  68 000001C6 R		push	OFFSET num_arr
 0000007C  E8 0000013B			call	DisplayMedian
 00000081  E8 00000000 E		call	Crlf
 00000086  E8 00000000 E		call	Crlf

 0000008B  BA 00000193 R		mov		edx, OFFSET sorted_str
 00000090  E8 00000000 E		call	WriteString
 00000095  E8 00000000 E		call	Crlf
 0000009A  68 000001C6 R		push	OFFSET num_arr
 0000009F  FF 35 000001C2 R		push	num_ints
 000000A5  E8 00000177			call	DisplayList
 000000AA  E8 00000000 E		call	Crlf

 000000AF  BA 000001A5 R		mov		edx, OFFSET goodbyte_str
 000000B4  E8 00000000 E		call	WriteString
 000000B9  E8 00000000 E		call	Crlf


				 	exit										; exit to operating system
 000000BE  6A 00	   *	    push   +000000000h
 000000C0  E8 00000000 E   *	    call   ExitProcess
 000000C5			main ENDP

				COMMENT &
					Description: Displays program intro
					Recieves: none
					Returns: none
					Pre-conditions: none
					Post-Conditions: none
					Registers Changed: none
				&
 000000C5			Intro PROC
 000000C5  55				push	ebp
 000000C6  8B EC			mov		ebp, esp
 000000C8  52				push	edx

 000000C9  8B 55 08			mov		edx, PARAM_A
 000000CC  E8 00000000 E		call	WriteString
 000000D1  E8 00000000 E		call	Crlf

 000000D6  5A				pop		edx
 000000D7  5D				pop		ebp
 000000D8  C2 0004			ret		4
 000000DB			Intro ENDP

				COMMENT &
					Description: Gets the number of numbers to fill the array with
					Recieves: offset of invalid str, offset of number prompt, offset of num_ints
					Returns: none
					Pre-conditions: none
					Post-Conditions: num_ints will be filled with the number of numbers to print
					Registers Changed: none
				&
 000000DB			GetData PROC
 000000DB  55				push	ebp
 000000DC  8B EC			mov		ebp, esp
 000000DE  50				push	eax
 000000DF  52				push	edx
 000000E0  56				push	esi

 000000E1			Top_A:
 000000E1  8B 55 0C			mov		edx, PARAM_B
 000000E4  E8 00000000 E		call	WriteString
 000000E9  E8 00000000 E		call	ReadDec

 000000EE  83 F8 0F			cmp		eax, USER_LOW
 000000F1  7C 09			jl		NotValid							; if input < lower lim
 000000F3  3D 000000C8			cmp		eax, USER_HI
 000000F8  7F 02			jg		NotValid							; if input > upper lim
 000000FA  EB 0F			jmp		ValidInput							; else...

 000000FC			NotValid:
 000000FC  8B 55 10			mov		edx, PARAM_C
 000000FF  E8 00000000 E		call	WriteString
 00000104  E8 00000000 E		call	Crlf
 00000109  EB D6			jmp		Top_A

 0000010B			ValidInput:
 0000010B  8B 75 08			mov		esi, PARAM_A
 0000010E  89 06			mov		[esi], eax							; Move number to print into the address stored in ESI
					
 00000110  5E				pop		esi
 00000111  5A				pop		edx
 00000112  58				pop		eax
 00000113  5D				pop		ebp
 00000114  C2 000C			ret		12
 00000117			GetData ENDP

				COMMENT &
					Description: Fills array with a specified number of numbers
					Recieves: number of integers to print, address of array to fill
					Returns: none
					Pre-conditions: none
					Post-Conditions: array will be filled with random numbers
					Registers Changed: none
				&
 00000117			FillArray PROC
 00000117  55				push	ebp
 00000118  8B EC			mov		ebp, esp
 0000011A  50				push	eax
 0000011B  51				push	ecx
 0000011C  56				push	esi

 0000011D  E8 00000000 E		call	Randomize
 00000122  8B 4D 0C			mov		ecx, PARAM_B						; ECX <- Number of ints
 00000125  8B 75 08			mov		esi, PARAM_A						; ESI <- Address of arr
					
 00000128			Loop_A:
 00000128  B8 000003E7			mov		eax, RAND_HI
 0000012D  83 E8 64			sub		eax, RAND_LOW						; Upper lim - Lower lim
 00000130  E8 00000000 E		call	RandomRange							; Random[0 .. Upper lim - Lower lim]
 00000135  83 C0 64			add		eax, RAND_LOW						; Random[Lower lim .. Upper lim]
 00000138  89 06			mov		[esi], eax							; Address @ ESI <- Random[lower lim .. Upper lim]
 0000013A  83 C6 04			add		esi, 4								; Increment to next elem of arr
 0000013D  E2 E9			loop	Loop_A

 0000013F  5E				pop		esi
 00000140  59				pop		ecx
 00000141  58				pop		eax
 00000142  5D				pop		ebp
 00000143  C2 0008			ret		8
 00000146			FillArray ENDP

				COMMENT &
					Description: Sorts and merges two subarrays
					Recieves: offset of array, low index, middle index, upper index
					Returns: none
					Pre-conditions: Array must be filled with values
					Post-Conditions: Array will be sorted
					Registers Changed: eax, ecx, edx
				&

 00000146			Exchange PROC
 00000146  55				push	ebp
 00000147  8B EC			mov		ebp, esp
 00000149  50				push	eax
 0000014A  53				push	ebx
 0000014B  51				push	ecx
 0000014C  52				push	edx

 0000014D  8B 45 08			mov		eax, DWORD PTR PARAM_A
 00000150  8B 5D 0C			mov		ebx, DWORD PTR PARAM_B
 00000153  8B 08			mov		ecx, [eax]
 00000155  8B 13			mov		edx, [ebx]
 00000157  89 10			mov		[eax], edx
 00000159  89 0B			mov		[ebx], ecx

 0000015B  5A				pop		edx
 0000015C  59				pop		ecx
 0000015D  5B				pop		ebx
 0000015E  58				pop		eax
 0000015F  5D				pop		ebp
 00000160  C2 0008			ret		8
 00000163			Exchange ENDP

				COMMENT &
					Description: Sorts list
					Recieves: offset of array, num_ints
					Returns: none
					Pre-conditions: Array must be filled with values
					Post-Conditions: Array will be sorted
					Registers Changed: none
				&
 00000163			SortList PROC
 00000163  55				push	ebp
 00000164  8B EC			mov		ebp, esp
 00000166  50				push	eax
 00000167  53				push	ebx
 00000168  51				push	ecx
 00000169  52				push	edx
 0000016A  56				push	esi
 0000016B  57				push	edi

 0000016C  8B 4D 0C			mov		ecx, DWORD PTR PARAM_B
 0000016F  49				dec		ecx
 00000170			Loop_D:	
 00000170  8B 7D 0C			mov		edi, DWORD PTR PARAM_B			; EDI <- index
 00000173  2B F9			sub		edi, ecx						; i = k 
 00000175  4F				dec		edi
 00000176  B8 00000004			mov		eax, 4
 0000017B  BA 00000000			mov		edx, 0
 00000180  F7 E7			mul		edi
 00000182  8B F8			mov		edi, eax						; EDI <- index offset
 00000184  51				push	ecx
 00000185  8B 5D 08			mov		ebx, [ebp+8]					; EBX <- arr[i]
 00000188  03 DF			add		ebx, edi
 0000018A  8B C3			mov		eax, ebx
 0000018C  8B F3			mov		esi, ebx
 0000018E  83 C0 04			add		eax, 4
 00000191  BA 00000000			mov		edx, 0
 00000196			Loop_E:
 00000196  42			 	inc		edx								; EDX is accumulator
 00000197  56				push	esi
 00000198  8B 30			mov		esi, [eax]
 0000019A  3B 33			cmp		esi, [ebx]
 0000019C  5E				pop		esi
 0000019D  7E 04			jle		Not_A
 0000019F  8B D8			mov		ebx, eax
 000001A1  8B FA			mov		edi, edx
 000001A3			Not_A:
 000001A3  83 C0 04			add		eax, 4							; EAX <- arr[j+1]
 000001A6  E2 EE			loop	Loop_E

 000001A8  59				pop		ecx
 000001A9  56				push	esi
 000001AA  53				push	ebx
 000001AB  E8 FFFFFF96			call	Exchange
 000001B0  E2 BE			loop	Loop_D

 000001B2  5F				pop		edi
 000001B3  5E				pop		esi
 000001B4  5A				pop		edx
 000001B5  59				pop		ecx
 000001B6  5B				pop		ebx
 000001B7  58				pop		eax
 000001B8  5D				pop		ebp
 000001B9  C2 0008			ret		8
 000001BC			SortList ENDP

 000001BC			DisplayMedian PROC
 000001BC  55				push	ebp
 000001BD  8B EC			mov		ebp, esp
 000001BF  50				push	eax
 000001C0  53				push	ebx
 000001C1  51				push	ecx
 000001C2  52				push	edx
 000001C3  56				push	esi

 000001C4  BA 00000000			mov		edx, 0
 000001C9  8B 45 0C			mov		eax, DWORD PTR PARAM_B					; EAX <- Request
 000001CC  8B 75 08			mov		esi, DWORD PTR PARAM_A					; ESI <- OFFSET Arr
 000001CF  B9 00000002			mov		ecx, 2
 000001D4  F7 F1			div		ecx
 000001D6  83 FA 00			cmp		edx, 0
 000001D9  75 0F			jne		Odd
 000001DB  B9 00000004			mov		ecx, 4
 000001E0  F7 E1			mul		ecx
 000001E2  03 C6			add		eax, esi						; EAX <- Address of middle elem
 000001E4  8B 18			mov		ebx, [eax]
 000001E6  8B C3			mov		eax, ebx						; EAX <- Value of middle elem
 000001E8  EB 29			jmp		Ret_B
 000001EA			Odd:
 000001EA  50				push	eax
 000001EB  BA 00000000			mov		edx, 0
 000001F0  40				inc		eax
 000001F1  B9 00000004			mov		ecx, 4
 000001F6  F7 E1			mul		ecx								; EAX <- Index offset
 000001F8  03 C6			add		eax, esi						; EAX <- Address of middle elem + 1
 000001FA  8B 18			mov		ebx, [eax]						; EBX <- Value of middle elem + 1
 000001FC  58				pop		eax
 000001FD  B9 00000004			mov		ecx, 4
 00000202  F7 E1			mul		ecx
 00000204  03 C6			add		eax, esi
 00000206  8B 08			mov		ecx, [eax]
 00000208  8B C1			mov		eax, ecx						; EAX <- Value of middle elem - 1
 0000020A  03 C3			add		eax, ebx
 0000020C  B9 00000002			mov		ecx, 2
 00000211  F7 F1			div		ecx								; EAX <- Gets average of these two values
 00000213			Ret_B:
 00000213  E8 00000000 E		call	WriteDec
 00000218  5E				pop		esi
 00000219  5A				pop		edx
 0000021A  59				pop		ecx
 0000021B  5B				pop		ebx
 0000021C  58				pop		eax
 0000021D  5D				pop		ebp
 0000021E  C2 0008			ret		8
 00000221			DisplayMedian ENDP

				COMMENT &
					Description: Prints out the a given list
					Recieves: number of elems in arr, address of array
					Returns: none
					Pre-conditions: array must be filled with n values
					Post-Conditions: Array will be printed out to user
					Registers Changed: none
				&
 00000221			DisplayList PROC
 00000221  55				push	ebp
 00000222  8B EC			mov		ebp, esp
 00000224  83 EC 04			sub		esp, 4								; Save space for local vars
 00000227  51				push	ecx
 00000228  56				push	esi
 00000229  50				push	eax
 0000022A  53				push	ebx

 0000022B  8B 4D 08			mov		ecx, PARAM_A						; ECX <- length of array
 0000022E  8B 75 0C			mov		esi, PARAM_B						; ESI <- base pointer to array
 00000231  C7 45 FC			mov		DWORD PTR LOCAL_A, SPACE_CHAR
	   00000020
 00000238  8B D5			mov		edx, ebp
 0000023A  83 EA 04			sub		edx, 4
 0000023D  FC				cld

 0000023E			Loop_B:
 0000023E  AD				lodsd
 0000023F  E8 00000000 E		call	WriteDec
 00000244  8B 45 08			mov		eax, PARAM_A
 00000247  2B C1			sub		eax, ecx							; EAX <- number of times loop has run -1
 00000249  40				inc		eax									; EAX <- number of times loop has run
 0000024A  52				push	edx
 0000024B  BA 00000000			mov		edx, 0
 00000250  BB 0000000A			mov		ebx, NUM_PER_LINE
 00000255  F7 F3			div		ebx
 00000257  83 FA 00			cmp		edx, 0								; Is the current iteration of this loop a multiple of 10?
 0000025A  5A				pop		edx
 0000025B  75 07			jne		Continue							; If not, continue
 0000025D  E8 00000000 E		call	Crlf								; Else, create a new line
 00000262  EB 05			jmp		Loop_C
 00000264			Continue:
 00000264  E8 00000000 E	 	call	WriteString
 00000269			Loop_C:
 00000269  E2 D3			loop	Loop_B

 0000026B  5B				pop		ebx
 0000026C  58				pop		eax
 0000026D  5E				pop		esi
 0000026E  59				pop		ecx
 0000026F  8B E5			mov		esp, ebp
 00000271  5D				pop		ebp
 00000272  C2 0008			ret		8
 00000275			DisplayList ENDP


				END main
Microsoft (R) Macro Assembler Version 14.29.30139.0	    03/01/22 17:53:59
"Assignment 5     (assignment5.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004E6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000275 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayList  . . . . . . . . . .	P Near	 00000221 _TEXT	Length= 00000054 Public STDCALL
  Loop_B . . . . . . . . . . . .	L Near	 0000023E _TEXT	
  Continue . . . . . . . . . . .	L Near	 00000264 _TEXT	
  Loop_C . . . . . . . . . . . .	L Near	 00000269 _TEXT	
DisplayMedian  . . . . . . . . .	P Near	 000001BC _TEXT	Length= 00000065 Public STDCALL
  Odd  . . . . . . . . . . . . .	L Near	 000001EA _TEXT	
  Ret_B  . . . . . . . . . . . .	L Near	 00000213 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Exchange . . . . . . . . . . . .	P Near	 00000146 _TEXT	Length= 0000001D Public STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FillArray  . . . . . . . . . . .	P Near	 00000117 _TEXT	Length= 0000002F Public STDCALL
  Loop_A . . . . . . . . . . . .	L Near	 00000128 _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetData  . . . . . . . . . . . .	P Near	 000000DB _TEXT	Length= 0000003C Public STDCALL
  Top_A  . . . . . . . . . . . .	L Near	 000000E1 _TEXT	
  NotValid . . . . . . . . . . .	L Near	 000000FC _TEXT	
  ValidInput . . . . . . . . . .	L Near	 0000010B _TEXT	
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Intro  . . . . . . . . . . . . .	P Near	 000000C5 _TEXT	Length= 00000016 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SortList . . . . . . . . . . . .	P Near	 00000163 _TEXT	Length= 00000059 Public STDCALL
  Loop_D . . . . . . . . . . . .	L Near	 00000170 _TEXT	
  Loop_E . . . . . . . . . . . .	L Near	 00000196 _TEXT	
  Not_A  . . . . . . . . . . . .	L Near	 000001A3 _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000C5 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOCAL_A  . . . . . . . . . . . .	Text   	 [ebp-4]
LOCAL_B  . . . . . . . . . . . .	Text   	 [ebp-8]
LOCAL_C  . . . . . . . . . . . .	Text   	 [ebp-12]
LOCAL_D  . . . . . . . . . . . .	Text   	 [ebp-16]
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUM_PER_LINE . . . . . . . . . .	Number	 0000000Ah   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PARAM_A  . . . . . . . . . . . .	Text   	 [ebp+8]
PARAM_B  . . . . . . . . . . . .	Text   	 [ebp+12]
PARAM_C  . . . . . . . . . . . .	Text   	 [ebp+16]
PARAM_D  . . . . . . . . . . . .	Text   	 [ebp+20]
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RAND_HI  . . . . . . . . . . . .	Number	 000003E7h   
RAND_LOW . . . . . . . . . . . .	Number	 00000064h   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SPACE_CHAR . . . . . . . . . . .	Number	 00000020h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_HI  . . . . . . . . . . . .	Number	 000000C8h   
USER_LOW . . . . . . . . . . . .	Number	 0000000Fh   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyte_str . . . . . . . . . .	Byte	 000001A5 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_str  . . . . . . . . . . .	Byte	 00000000 _DATA	
invalid_str  . . . . . . . . . .	Byte	 00000156 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
median_str . . . . . . . . . . .	Byte	 00000170 _DATA	
num_arr  . . . . . . . . . . . .	DWord	 000001C6 _DATA	
num_ints . . . . . . . . . . . .	DWord	 000001C2 _DATA	
number_prompt  . . . . . . . . .	Byte	 00000121 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted_str . . . . . . . . . . .	Byte	 00000193 _DATA	
unsort_str . . . . . . . . . . .	Byte	 0000017F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
